const a = (e) => {
  const t = new PerformanceObserver((r) => {
    e.POCallback(r);
  });
  return t.observe({
    buffered: !0,
    //https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType
    type: e.metric
  }), t;
}, i = [
  "element",
  // 'event',
  "first-input",
  "largest-contentful-paint",
  // 'layout-shift',
  "longtask",
  // 'mark',
  // 'measure',
  "navigation",
  "paint",
  // 'resource',
  // 'taskattribution',
  "visibility-state"
], l = [
  "paint",
  "first-input",
  "largest-contentful-paint",
  "longtask"
], p = ["paint", "largest-contentful-paint"], o = () => {
  const e = PerformanceObserver.supportedEntryTypes || [];
  return i.filter((t) => e.includes(t));
}, u = (e) => {
  switch (e) {
    case "default":
      return l;
    case "min":
      return p;
    case "max":
      return o();
  }
}, f = {
  preset: "default",
  endpoint: ""
}, g = (e) => {
  e.forEach((t) => {
    console.log(`${t.name}:`, t.startTime);
  });
}, m = (e) => {
  e.forEach((t) => {
    console.log(`${t.name}:`, t.processingStart - t.startTime);
  });
}, d = (e) => {
  e.forEach((t) => {
    console.log(`${t.entryType}:`, t.renderTime);
  });
}, T = (e) => {
  e.forEach((t) => {
    console.log(`${t.name}:`, t.startTime);
  });
}, E = (e) => {
  switch (e) {
    case "paint":
      return m;
    case "largest-contentful-paint":
      return d;
    case "first-input":
      return T;
    case "longtask":
      return g;
    default:
      return () => {
      };
  }
}, b = (e = f) => {
  const t = o(), n = u(e.preset).filter(
    (s) => t.includes(s)
  );
  console.log("Supported metrics:", t), console.log("metrics:", n);
  for (const s of n)
    a({
      POCallback: (c) => {
        E(s)(c.getEntries());
      },
      metric: s
    });
};
export {
  b as init
};
